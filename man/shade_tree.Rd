% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shading.R
\name{shade_tree}
\alias{shade_tree}
\title{Calculate shade of a QSM}
\usage{
shade_tree(
  qsm,
  sun_position,
  radiation = NULL,
  resolution = 0.1,
  item_pts = NULL,
  sequential = TRUE,
  xmin = -20,
  xmax = 20,
  ymin = -20,
  ymax = 20,
  transparency = 0,
  plane_origin = c(0, 0, 0),
  plane_norm = c(0, 0, 1)
)
}
\arguments{
\item{qsm}{An object of class \code{QSM}.}

\item{sun_position}{\code{data.frame}, sunlight direction over the time.}

\item{radiation}{\code{data.frame}, diffuse and global radiation over time,
must be formatted as the example from \code{dummy_radiation()}, leave empty
to obtain only light intensity.}

\item{resolution}{\code{numeric}, spatial resolution of output rasters.}

\item{item_pts}{\code{matrix}, contains coordinates of simulated items.}

\item{sequential}{\code{boolean}, whether sequential (\code{TRUE}) or
parallel processing (\code{FALSE}) should be used.}

\item{xmin, xmax, ymin, ymax}{\code{numeric}, extent of the shading raster in
meters, relative to the stem base.}

\item{transparency}{\code{numeric}, transparency of the item shade,
1 = fully transparent, 0 = fully opaque.}

\item{plane_origin}{\code{numeric}, \code{xyz}-vector of a point on the
ground.}

\item{plane_norm}{\code{numeric}, \code{xyz}-vector of the ground normal.}
}
\value{
\code{SpatRaster}, contains radiation around the tree for each
\code{sun_position}, the unit of the radiation depends on the unit used in
\code{radiation}. The single rasters for the time steps are stored as
layers with the timestamp as names.
}
\description{
\code{shade_tree} calculates the shade cast by a tree based on given sun
positions. The radiation within this time frame may be specified, otherwise,
shade is coded as 0 and light is coded as 1. The function can include the
shade of modeled items (leaves, flowers) if provided. The processing may be
done sequentially or in parallel. For the output rasters, the resolution and
extent is required. Further, the transparency of leaves may be configured.
The ground can be specified via a point on the plane and the plane normal.
Per default, an even ground at the origin is assumed.
}
\details{
The parameter \code{sun_position} determines for which time steps the shade
is calculated. The \code{resolution} of the shade raster should correspond to
the unit used in \code{radiation}, e.g. when using a resolution of 0.1,
the radiation should be given per dmÂ². If the raster cell contains any
shade, the diffuse radiation is assigned. Otherwise, the global radiation is
assigned. Turning parallel processing on (\code{sequential = FALSE}) might
only work for windows computers.
}
\examples{
# load qsm
file_path <- system.file("extdata", "Prunus_avium_QSM_simplified.mat", package="qsm2shade")
qsm <- qsm2r::readQSM(file_path)

# shift qsm to origin
# (shade is always projected to z = 0)
qsm <- qsm2r::set_location(qsm, c(0,0,0))

# get sun position at different times
timeframe <- seq(ISOdate(2020, 03, 22, 0, 0), ISOdate(2020, 03, 22, 23, 50), "10 mins")
sun_position <- sun_movement(timeframe, latitude = 48.07, longitude = 7.60)

# create dummy radiation data
radiation <- dummy_radiation(ISOdate(2020, 01, 01, 0, 0), ISOdate(2020, 12, 31, 23, 50), "1 hour")

# without leaves:

# calculate shade
result <- shade_tree(qsm, sun_position, radiation)

# show shade
plot(result)

# with leaves:

# create polygons for single item
leaf <- create_single_leaf(leaf_type = "normal", length_m = 0.1)

# get dummy item distribution
distribution <- dummy_item_distribution()

# create items
leaf_pts <- add_items(qsm, distribution, leaf, item_type = "leaves")

# calculate shade
result <- shade_tree(qsm, sun_position, radiation, item_pts = leaf_pts)

# summarize per day
result_daily <- shade_summarize(result, "day")

# plot daily shade
terra::plot(result_daily)
}
\seealso{
\code{\link{shade_summarize}}, \code{\link{sun_movement}},
\code{\link{add_items}}
}
